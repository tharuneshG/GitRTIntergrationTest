name: Create Task List from PR

on:
  pull_request:
    types: [opened, reopened]

jobs:
  create-task-list:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # Updated to v3

      - name: Get PR Title
        run: echo "PR_TITLE=${{ github.event.pull_request.title }}" >> $GITHUB_ENV

      - name: Determine Task List Filename
        run: |
          if [[ "$PR_TITLE" == *"task1"* ]]; then
            echo "FILENAME=task_list_1.md" >> $GITHUB_ENV
          elif [[ "$PR_TITLE" == *"task2"* ]]; then
            echo "FILENAME=task_list_2.md" >> $GITHUB_ENV
          else
            echo "No matching task list found for PR title"
            exit 1
          fi

      - name: Get File Contents
        run: |
          response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                            "https://api.github.com/repos/${{ github.repository }}/docs/$FILENAME?ref=main")  # Adjust 'main' if your default branch differs
          echo "$response" | jq .
          content=$(echo "$response" | jq -r '.content')
          echo "Encoded Content: $ENCODED_CONTENT"  # Print the encoded content
          if [ "$content" == "null" ]; then
            echo "Failed to fetch content or file not found!"
            exit 1
          fi
          echo "ENCODED_CONTENT=$content" >> $GITHUB_ENV

      - name: Decode File Contents
        run: |
          echo "Decoded Content:"
          echo "$ENCODED_CONTENT" | base64 --decode
          echo "DECODED_CONTENT=$(echo "$ENCODED_CONTENT" | base64 --decode)" >> $GITHUB_ENV

      - name: Print Decoded Content
        run: echo "Decoded Content:$DECODED_CONTENT"

      - name: Create Task List Comment
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const content = `${process.env.DECODED_CONTENT}`;
            if (!content) {
              console.log("No content available to comment.");
              return;
            }
            const comment = `
              ### Task List
              
              ${content}
            `;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
