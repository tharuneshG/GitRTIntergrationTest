name: Create Task List from PR

on:
  pull_request:
    types: [opened, reopened]

jobs:
  create-task-list:
    runs-on: ubuntu-latest
    
    env:
      PR_TITLE: ${{ github.event.pull_request.title }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Determine Task List Filename
        run: |
          if [[ "$PR_TITLE" == *"task1"* ]]; then
            echo "FILENAME=task_list_1.md" >> $GITHUB_ENV
          elif [[ "$PR_TITLE" == *"task2"* ]]; then
            echo "FILENAME=task_list_2.md" >> $GITHUB_ENV
          else
            echo "No matching task list found for PR title"
            exit 1
          fi

      - name: Get File Contents
        run: |
          file_content=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                        "https://api.github.com/repos/${{ github.repository }}/contents/docs/${{ env.FILENAME }}")
          echo "File Content Response: $file_content"
          echo "ENCODED_CONTENT=$(echo "$file_content" | jq -r '.content')" >> $GITHUB_ENV

      - name: Decode File Contents
        run: echo "DECODED_CONTENT=$(echo "$ENCODED_CONTENT" | base64 --decode)" >> $GITHUB_ENV

      - name: Print Decoded Content
        run: echo "Decoded Content:$DECODED_CONTENT"

      - name: Create Task List Comment
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const comment = `
            ### Task List
            
            ${process.env.DECODED_CONTENT}
            `;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
