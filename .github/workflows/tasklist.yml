name: Create Task List from PR

on:
  pull_request:
    types: [opened, reopened]

jobs:
  create-task-list:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Extract and Format Tags as List
        id: format-tags
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          TAG_LIST=$(echo $PR_TITLE | sed -n 's/.*RTImport-\(.*\)-RTChk.*/\1/p')
          TAG_LIST="[${TAG_LIST//, /,}]"
          echo "::set-output name=tag_list::$TAG_LIST"

      - name: Fetch Tags File from Another Repo
        id: fetch-tags-file
        uses: actions/github-script@v4
        with:
          script: |
            const content = await github.repos.getContent({
              owner: 'tharuneshG',
              repo: 'taskList',
              path: 'docs/tags.txt'
            });
            return Buffer.from(content.data.content, 'base64').toString('utf8');

      - name: Determine Task Files from Tags
        run: |
          TAG_LIST=${{ steps.format-tags.outputs.tag_list }}
          TAGS_FILE="${{ steps.fetch-tags-file.outputs.result }}"
          declare -A FILE_SET
          while read -r line; do
            TAG_NAME=$(echo "$line" | cut -d ' ' -f1)
            FILES=$(echo "$line" | sed 's/.*- //')
            if [[ $TAG_LIST =~ $TAG_NAME ]]; then
              IFS=',' read -r -a file_array <<< "$FILES"
              for file in "${file_array[@]}"; do
                FILE_SET[$file]=1
              done
            fi
          done <<< "$TAGS_FILE"
          FILES_LIST=$(IFS=,; echo "${!FILE_SET[*]}")
          echo "Unique task files: $FILES_LIST"
          echo "::set-output name=files_list::$FILES_LIST"

      - name: Output Files List
        run: echo "Files to process:${{ steps.determine-task-files.outputs.files_list }}"

      - name: Decode and Comment for Each File
        run: |
          FILES_LIST="${{ steps.determine-filenames.outputs.files_list }}"
          IFS=',' read -r -a files <<< "$FILES_LIST"
          for FILENAME in "${files[@]}"; do
            echo "Processing file: $FILENAME"
      
            # Fetch and decode the file content
            file_content=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/tharuneshG/taskList/contents/docs/${FILENAME}")
            ENCODED_CONTENT=$(echo "$file_content" | jq -r '.content')
            DECODED_CONTENT=$(echo "$ENCODED_CONTENT" | base64 --decode)
      
            echo "### Task List for $FILENAME" > decoded_content.txt
            echo "$DECODED_CONTENT" >> decoded_content.txt
            github_token="${{ secrets.GITHUB_TOKEN }}"
            repo="${{ github.repository }}"
            pr_number="${{ github.event.pull_request.number }}"
            comment_body=$(<decoded_content.txt)
            json_payload=$(jq -n --arg body "$comment_body" '{"body": $body}')
      
            curl -s -H "Authorization: token $github_token" \
              -H "Content-Type: application/json" \
              -X POST -d "$json_payload" \
              "https://api.github.com/repos/$repo/issues/$pr_number/comments"
          done
        shell: bash

