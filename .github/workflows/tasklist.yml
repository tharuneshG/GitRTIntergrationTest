name: Create Task List from PR

on:
  pull_request:
    types: [opened, reopened]

jobs:
  create-task-list:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Extract and Format Tags as List
        id: format-tags
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          # Use sed to extract the text between RTImport- and -RTChk
          TAG_LIST=$(echo $PR_TITLE | sed -n 's/.*RTImport-\(.*\)-RTChk.*/\1/p')
          # Format as a pseudo-array string
          TAG_LIST="[${TAG_LIST//, /,}]"
          echo "Formatted tag list as array: $TAG_LIST"
          # Set the output for use in later steps
          echo "::set-output name=tag_list::$TAG_LIST"

      - name: Determine Task List Filenames
        id: determine-filenames
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          # Assuming you define your filename logic here
          echo "::set-output name=files_list::task_list_1.md,task_list_2.md"

      - name: Decode and Comment for Each File
        run: |
          FILES_LIST="${{ steps.determine-filenames.outputs.files_list }}"
          IFS=',' read -r -a files <<< "$FILES_LIST"
          for FILENAME in "${files[@]}"; do
            echo "Processing file: $FILENAME"
      
            # Fetch and decode the file content
            file_content=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/tharuneshG/taskList/contents/docs/${FILENAME}")
            ENCODED_CONTENT=$(echo "$file_content" | jq -r '.content')
            DECODED_CONTENT=$(echo "$ENCODED_CONTENT" | base64 --decode)
      
            echo "### Task List for $FILENAME" > decoded_content.txt
            echo "$DECODED_CONTENT" >> decoded_content.txt
            github_token="${{ secrets.GITHUB_TOKEN }}"
            repo="${{ github.repository }}"
            pr_number="${{ github.event.pull_request.number }}"
            comment_body=$(<decoded_content.txt)
            json_payload=$(jq -n --arg body "$comment_body" '{"body": $body}')
      
            curl -s -H "Authorization: token $github_token" \
              -H "Content-Type: application/json" \
              -X POST -d "$json_payload" \
              "https://api.github.com/repos/$repo/issues/$pr_number/comments"
          done
        shell: bash

