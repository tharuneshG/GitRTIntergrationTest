name: Create Task List from PR

on:
  pull_request:
    types: [opened, reopened]

jobs:
  create-task-list:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Get PR Title
      id: pr_title
      run: echo "::set-output name=title::${{ github.event.pull_request.title }}"

    - name: Determine Task List Filename
      id: determine_filename
      run: |
        title="${{ steps.pr_title.outputs.title }}"
        if [[ "$title" == *"task1"* ]]; then
          echo "::set-output name=filename::task_list_1.md"
        elif [[ "$title" == *"task2"* ]]; then
          echo "::set-output name=filename::task_list_2.md"
        else
          echo "::error::No matching task list found for PR title"
          exit 1
        fi

    - name: Get File Contents
      id: get_file
      run: |
        file_name="${{ steps.determine_filename.outputs.filename }}"
        file_content=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                      "https://api.github.com/repos/${{ github.repository }}/contents/${file_name}")
        echo "::set-output name=content::$(echo "$file_content" | jq -r '.content')"

    - name: Decode File Contents
      id: decode_content
      run: echo "::set-output name=decoded_content::$(echo "${{ steps.get_file.outputs.content }}" | base64 -d)"

    - name: Create Task List Comment
      uses: actions/github-script@v4
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const content = Buffer.from('${{ steps.decode_content.outputs.decoded_content }}', 'base64').toString('utf-8');
          const comment = `
          ### Task List
          ${content}
          `;
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
